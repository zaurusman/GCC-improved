%{
	#include <iostream>
	#include <stdlib.h>
	#include "hw3_output.hpp"
	#include "attributes.hpp"
	#include "utils.hpp"

	using namespace std;
	using namespace output;
	extern int yylex();
	extern int yylineno;
	int yyerror(const char * message);

%}


%token <type> INT
%token <type> BYTE
%token B
%token <type> BOOL
%token TRUE
%token FALSE
%token RETURN
%token BREAK
%token CONTINUE
%token SC
%token <name> ID
%token <val> NUM
%token <name> STRING

%right ASSIGN

%left OR
%left AND

%left EQ_NEQ
%left RELOP

%left PLUS_MINUS
%left MUL_DIV

%right NOT

%left RPAREN LPAREN 
%left RBRACE LBRACE	

%nonassoc ELSE
%nonassoc IF
%nonassoc WHILE

%type <exp> Exp
%type <type> Type
%type <exp> Call

%%

Program       :  Statements                                     {} 
;

Statements    :  Statement                                      {} 
              |  Statements Statement                           {} 
;

Statement     :  LBRACE Statements RBRACE                       {} 
              |  Type ID SC                                     {} 
              |  Type ID ASSIGN Exp SC                          {} 
              |  ID ASSIGN Exp SC                               {} 
              |  Call SC                                        {} 
              |  RETURN SC                                      {} 
              |  IF LPAREN Exp RPAREN Statement                 {} 
              |  IF LPAREN Exp RPAREN Statement ELSE Statement  {} 
              |  WHILE LPAREN Exp RPAREN Statement              {} 
              |  BREAK SC                                       {} 
              |  CONTINUE SC                                    {} 
;

Call          :  ID LPAREN Exp RPAREN                           {call($$,$1,$3);}
;

Type          :  INT                                            {$$ = $1;}
              |  BYTE                                           {$$ = $1;}
              |  BOOL                                           {$$ = $1;}
;

Exp           :  LPAREN Exp RPAREN                              {$$ = $2;}
              |  Exp MUL_DIV Exp                                {binop($$, $1, $3);}
              |  Exp PLUS_MINUS Exp                             {binop($$, $1, $3);}
              |  ID                                             {}
              |  Call                                           {$$ = $1;}
              |  NUM                                            {$$.type = INT_T;}
              |  NUM B                                          {numB($$, $1);}
              |  STRING                                         {$$.type = STRING_T;}
              |  TRUE                                           {$$.type = BOOL_T;}
              |  FALSE                                          {$$.type = BOOL_T;}
              |  NOT Exp                                        {logic_not($$, $2);}
              |  Exp AND Exp                                    {logic($$, $1, $3);}
              |  Exp OR Exp                                     {logic($$, $1, $3);}
              |  Exp RELOP Exp                                  {relop($$,$1,$3);}
              |  Exp EQ_NEQ Exp                                 {relop($$,$1,$3);}
              |  LPAREN Type RPAREN Exp                         {cast($$,$2,$4);}
;

%%

int main()
{
	yyparse();
}

int yyerror(const char * message)
{
	output::errorSyn(yylineno);
	exit(0);
}

